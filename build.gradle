import org.apache.tools.ant.taskdefs.condition.Os

task clone_rtd_files(type:Exec){
    workingDir "${rootProject.rootDir}"
    commandLine 'git','clone','--depth=1','https://github.com/embention/RTD_core.git','repo_rtd_temp'
}

task install_rtd_evn(type:Exec){
    File testFile = new File("${rootProject.rootDir}/repo_rtd_temp");
    if ( !testFile.exists() ) {
      dependsOn clone_rtd_files
    }
    workingDir "${rootProject.rootDir}"
    commandLine 'pip','install', '-r','repo_rtd_temp/requirements.txt'
}

task install_press_theme(type:Exec){
    dependsOn install_rtd_evn
    workingDir "${rootProject.rootDir}"
	println "${rootProject.rootDir}"
    commandLine 'pip','install','repo_rtd_temp/sphinx_press_custom'
}

task set_conf_options(type:Exec){
    dependsOn install_press_theme
    workingDir "${rootProject.rootDir}"
    commandLine 'python','repo_rtd_temp/set_conf_options.py','--author','Embention', '--project_path', projectDir
}

task copy_rtd_logo(type: Copy) {
    dependsOn set_conf_options
    if("RTD-UM" in "${projectDir.name}"){
        from file("${rootProject.rootDir}/repo_rtd_temp/logo.png")
    }else{
        from file("${rootProject.rootDir}/repo_rtd_temp/logo-documentation.png")
    }
    into file("${projectDir}")
}

task copy_rtd_libs(type: Copy) {
    dependsOn copy_rtd_logo
    from file("${rootProject.rootDir}/repo_rtd_temp/libs/")
    into file("${projectDir}/libs")
}

task rtd_html(type:Exec){
  dependsOn copy_rtd_libs
  println "${projectDir}"
  String version_='latest'
  if (project.hasProperty('version_rtd') && project.version_rtd!='unspecified'){
      println version_rtd
      version_=project.version_rtd
  }
  commandLine "sphinx-build",'-T','-b','html', '-q', '-d', '_build/doctrees-readthedocs','-D', 'version=' + version_, '.', '_build/html'
}

task rtd_latex(type:Exec){
  dependsOn copy_rtd_libs
  println "${projectDir}"
  String version_='latest'
  if (project.hasProperty('version_rtd') && project.version_rtd!='unspecified'){
      println version_rtd
      version_=project.version_rtd
  }

  if (project.hasProperty('today_rtd') && project.today_rtd != 'unspecified') {
    println project.today_rtd
    commandLine "sphinx-build",'-b','latex', '-q', '-d', '_build/doctrees-readthedocs', '-D','language=' + project.name , '-D', 'version=' + version_, '-D', 'release=' + version_, '-D', 'today=' + project.today_rtd, '.', '_build/latex'
  } else {
    commandLine "sphinx-build",'-b','latex', '-q', '-d', '_build/doctrees-readthedocs', '-D','language=' + project.name , '-D', 'version=' + version_, '-D', 'release=' + version_, '.', '_build/latex'
  }
}


task rtd_epub(type:Exec){
  dependsOn copy_rtd_libs
  println "${projectDir}"
  String version_='latest'
  if (project.hasProperty('version_rtd') && project.version_rtd!='unspecified'){
      println version_rtd
      version_=project.version_rtd
  }

  if (project.hasProperty('today_rtd') && project.today_rtd != 'unspecified') {
    println project.today_rtd
    commandLine "sphinx-build",'-b','epub', '-q', '-d', '_build/doctrees-readthedocs', '-D', 'version=' + version_, '-D', 'release=' + version_, '-D', 'today=' + project.today_rtd, '.', '_build/epub'
  } else {
    commandLine "sphinx-build",'-b','epub', '-q', '-d', '_build/doctrees-readthedocs', '-D', 'version=' + version_, '-D', 'release=' + version_, '.','_build/epub'
  }
}

task clean_pdf_build(type:Delete) {
    delete '_build/latex/pdf_output'
}

task rtd_pdf(type:Exec){
  workingDir '_build/latex/'
  String output_name=project.parent.name+"-"+project.name
  if (!project.hasProperty('ignore_latex_build')){
      dependsOn rtd_latex
  }
  if (project.hasProperty('jobname') && project.jobname!='unspecified'){
      println jobname
      output_name=project.jobname
  }
  commandLine 'latexmk','-r','latexmkrc','-pdf','-f','-dvi-','-ps-','-output-directory=pdf_output','-jobname='+output_name,'-interaction=nonstopmode'
}

task clean_conf(type:Delete) {
    if("RTD-UM" in "${projectDir.name}"){
        delete 'conf.py',
        'libs',
        '_static',
        'logo.png'
    }else{
        delete 'conf.py',
        'libs',
        '_static',
        'logo-documentation.png'
    }
}

task clean_builds(type:Delete) {
    delete '_build'
}

task rtd_html_build {
    dependsOn rtd_html
    rtd_html.finalizedBy('clean_conf')
}

task rtd_latex_build {
    dependsOn rtd_latex
    rtd_latex.finalizedBy('clean_conf')
}

task rtd_epub_build {
    dependsOn rtd_epub
    rtd_epub.finalizedBy('clean_conf')
}

task rtd_pdf_build {
    dependsOn clean_pdf_build
    dependsOn rtd_pdf
    rtd_pdf.finalizedBy('clean_conf')
    tasks.findByName('rtd_pdf').mustRunAfter 'clean_pdf_build'
}

